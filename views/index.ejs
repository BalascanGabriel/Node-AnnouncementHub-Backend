<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Announcement HUB</title>
    <link rel="stylesheet" href="/css/index-style.css">
    <link rel="stylesheet" href="/css/card-style.css">
</head>

<body>
    <header>
        <nav>
            <ul>
                <li id="userDetails"></li>
                <li><a href="/">Home</a></li>
                <li><a href="/">All Announcements</a></li>
                <li id="login"><a href="/api/users/login">Login</a></li>
                <li id="register"><a href="api/users/register">Register</a></li>
                <li id="postAnnouncement"><a href="/api/announcements/new">Post Announcement</a></li>
                <li id="myDetails"><a href="#">My Details</a></li>
                <li id="myAnnouncements"><a href="/api/announcements/by-user-id-page /">My Announcements</a></li>
                <li id="favorites"><a id="favorites" href="#">Favorites</a></li>
                <li id="logout"><a href="">Logout</a></li>
            </ul>
        </nav>
    </header>
    <main>
        <div class="announcement-container">
            <!-- JavaScript will populate this section with announcement cards -->

        </div>
    </main>
    <footer>
        Powered by Balascan Gabriel
    </footer>
    <script>
        const login = document.querySelector("#login");
        const register = document.querySelector("#register");
        const userDetails = document.querySelector("#userDetails");
        const logout = document.querySelector("#logout");
        const myDetails = document.querySelector("#myDetails");
        const postAnnouncement = document.querySelector("#postAnnouncement");
        const favorites = document.querySelector("#favorites");
        const myAnnouncements = document.querySelector("#myAnnouncements");

        userDetails.style.display = "none";
        logout.style.display = "none";
        myDetails.style.display = "none";
        myAnnouncements.style.display = "none";
        postAnnouncement.style.display = "none";
        favorites.style.display = "none";


        let user = localStorage.getItem("user");
        if (user) {
            user = JSON.parse(user);

            login.style.display = "none";
            register.style.display = "none";
            userDetails.innerHTML = `Hello, ${user.name}`;
            userDetails.style.display = "block";
            logout.style.display = "block";
            myDetails.style.display = "block";
            myAnnouncements.style.display = "block";
            postAnnouncement.style.display = "block";
            favorites.style.display = "block";

        }

        // Use JavaScript to fetch and display announcements
        async function fetchAnnouncements() {
            try {
                const response = await fetch('api/announcements/all');
                const announcements = await response.json();

                const announcementContainer = document.querySelector('.announcement-container');

                announcements.forEach(announcement => {
                    const card = document.createElement('div');
                    card.classList.add('announcement-card');

                    const title = document.createElement('h2');
                    title.textContent = announcement.title;

                    const description = document.createElement('p');
                    description.textContent = announcement.description;

                    const price = document.createElement('p');
                    price.textContent = `Price: ${announcement.price} RON`;

                    const location = document.createElement('p');
                    location.textContent = `Location: ${announcement.location}`;

                    // Create "Details" button
                    const detailsButton = document.createElement('button');
                    detailsButton.textContent = 'Details';
                    detailsButton.classList.add('details-button');
                    detailsButton.addEventListener('click', () => {
                        // Add logic to handle the details button click here
                        // For example, you can redirect to a details page for the announcement.
                    });

                    const heartButton = document.createElement('button');
                    heartButton.textContent = '❤️';
                    heartButton.classList.add('heart-button');
                    heartButton.addEventListener('click', async () => {
                        const user = JSON.parse(localStorage.getItem("user"));
                        const userId = user.id;
                        const announcementId = announcement._id;
                        console.log(`User id : ${userId}, favorite announcement id ${announcementId}`);

                        try {
                            const response = await fetch('/api/favorites/add', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({ userId, announcementId }),
                            });
                            if (response.ok) {
                                // Successfully added to favorites
                                // You can update the UI to reflect this, e.g., change the heart color
                                heartButton.style.color = 'red';
                                alert('Announcement added to favorites !')
                            } else {
                                const data = await response.json();
                                console.error(data.message);
                                // Handle the error, e.g., show an error message to the user
                                alert(data.message);
                            }
                        } catch (error) {
                            console.error(error);
                            // Handle network or other errors
                            alert(error);
                        }

                    });

                    card.appendChild(detailsButton);


                    card.appendChild(title);
                    card.appendChild(description);
                    card.appendChild(price);
                    card.appendChild(location);
                    card.appendChild(detailsButton);
                    //if logged in
                    if (user) {
                        card.appendChild(heartButton);
                    }

                    announcementContainer.appendChild(card);
                });
            } catch (error) {
                console.error('Error fetching announcements:', error);
            }
        }

        // Call the function to fetch and display announcements
        fetchAnnouncements();

        //LOGOUT BUTTON
        logout.addEventListener("click", () => {
            // Clear user data from local storage
            localStorage.removeItem("user");
            // Reload the page
            location.reload();
        });

        myDetails.addEventListener("click", (event) => {
            event.preventDefault();

            // Get the user ID from localStorage
            const user = JSON.parse(localStorage.getItem("user"));
            if (user) {
                const userId = user.id;
                // Redirect to the user details page with the user ID as a query parameter
                //tot ce e dupa ? e returnat e returnat in backend in req.query, d-aia dincolo e req.query.id ca ala de dupa ?
                window.location.href = `/api/users/userDetails?id=${userId}`;
            }
        });

        myAnnouncements.addEventListener("click", (event) => {
            event.preventDefault();

            // Get the user ID from localStorage
            const user = JSON.parse(localStorage.getItem("user"));
            if (user) {
                const userId = user.id;
                // Redirect to the user announcements page with the user ID as a parameter
                window.location.href = `/api/announcements/by-user-id-page/${userId}`;
            }
        });

        /// Inside your existing JavaScript code
        const detailsButtons = document.querySelectorAll('.details-button');

        detailsButtons.forEach(button => {
            button.addEventListener('click', () => {
                // Get the announcement ID from the data attribute or other source
                const announcementId = button.getAttribute('data-announcement-id');

                // Construct the URL for the announcement details page
                const detailsPageUrl = `api/announcements/${announcementId}`; // Update to your actual URL structure

                // Navigate to the announcement details page
                window.location.href = detailsPageUrl;
            });
        });

        // JavaScript code to update the link and add an event listener
        // JavaScript code to update the link and add an event listener
        favorites.addEventListener('click', (event) => {
            event.preventDefault(); // Prevent the default behavior of the anchor tag

            const user = JSON.parse(localStorage.getItem("user"));
            const userId = user.id;
            const newUrl = `/api/favorites/${userId}`;

            // Update the URL without causing a full page reload
            window.history.pushState({}, '', newUrl);

            // Manually trigger a navigation to the new URL
            window.location.href = newUrl;
        });



    </script>
</body>

</html>